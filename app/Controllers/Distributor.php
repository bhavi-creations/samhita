<?php

namespace App\Controllers;

use App\Controllers\BaseController; // Assuming you have a BaseController
use App\Models\DistributorModel;
use CodeIgniter\HTTP\ResponseInterface; // For return types
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use Dompdf\Dompdf;
use Dompdf\Options;



class Distributor extends BaseController
{
    protected $distributorModel;
    protected $session;
    protected $validation;

    // The constructor is called when the controller is instantiated.
    public function __construct()
    {


        // Initialize the DistributorModel
        $this->distributorModel = new DistributorModel();
        // Initialize CodeIgniter services for direct access
        $this->session = \Config\Services::session();
        $this->validation = \Config\Services::validation();
        // Load helpers
        helper(['form', 'url']);
    }

    /**
     * Displays a list of all distributors.
     */
    public function index(): string
    {
        $data = [
            'title'        => 'Distributors List',
            'distributors' => $this->distributorModel->orderBy('created_at', 'DESC')->findAll(),
        ];
        return view('distributors/index', $data);
    }

    /**
     * Displays the form to add a new distributor.
     */
    public function add(): string
    {
        $data = [
            'title'         => 'Add New Distributor',
            'validation'    => \Config\Services::validation(), // Pass a fresh validation instance
            'statusOptions' => ['Active', 'Inactive', 'On Hold'],
            'distributor'   => null, // No existing distributor data for adding
        ];
        return view('distributors/add_form', $data);
    }

    /**
     * Handles the submission of the add new distributor form.
     */
    public function store(): ResponseInterface
    {
        $postData = $this->request->getPost();
        log_message('debug', 'Distributor::store - Received Post Data: ' . json_encode($postData));

        // Validate the received data using the model's dynamic rules
        if (!$this->distributorModel->validate($postData)) {
            // Get errors directly from the validation service, not the model's internal errors property
            $errors = \Config\Services::validation()->getErrors(); // THIS LINE IS CHANGED
            log_message('error', 'Distributor::store - Validation failed. Errors: ' . json_encode($errors));
            // Redirect back to the form with input data and validation errors
            return redirect()->back()->withInput()->with('errors', $errors);
        }

        // Attempt to save the data. The custom_id will be generated by the model's beforeInsert callback.
        if (!$this->distributorModel->save($postData)) {
            // If save fails, the model's general errors might be populated,
            // or it could be a database error. Let's try getting from model errors first.
            $dbErrors = $this->distributorModel->errors();
            log_message('error', 'Distributor::store - Model save() failed after validation. Database errors: ' . json_encode($dbErrors));
            // Redirect back with database-related errors if save failed
            return redirect()->back()->withInput()->with('errors', $dbErrors);
        }

        log_message('debug', 'Distributor::store - New distributor added successfully.');
        return redirect()->to(base_url('distributors'))->with('success', 'Distributor added successfully!');
    }

    /**
     * Displays the details of a single distributor.
     *
     * @param int $id The ID of the distributor to view.
     */
    public function view(int $id): string | ResponseInterface
    {
        $distributor = $this->distributorModel->find($id);

        if (!$distributor) {
            return redirect()->to(base_url('distributors'))->with('error', 'Distributor not found.');
        }

        $data = [
            'title'       => 'Distributor Details',
            'distributor' => $distributor,
        ];

        return view('distributors/view_details', $data);
    }

    /**
     * Displays the form to edit an existing distributor.
     *
     * @param int $id The ID of the distributor to edit.
     */
    public function edit(int $id): string | ResponseInterface
    {
        $distributor = $this->distributorModel->find($id);

        if (!$distributor) {
            return redirect()->to(base_url('distributors'))->with('error', 'Distributor not found for editing.');
        }

        $data = [
            'title'         => 'Edit Distributor',
            'validation'    => \Config\Services::validation(), // Pass a fresh validation instance
            'statusOptions' => ['Active', 'Inactive', 'On Hold'],
            'distributor'   => $distributor, // Pass existing distributor data to the form
        ];

        return view('distributors/add_form', $data); // Reuse the add_form
    }

    /**
     * Handles the submission of the edit distributor form.
     *
     * @param int $id The ID of the distributor being updated.
     */
    public function update(int $id): ResponseInterface
    {
        $postData = $this->request->getPost();
        log_message('debug', 'Distributor::update - Received Post Data for ID: ' . $id . ' -> ' . json_encode($postData));

        // Important: Add the ID to the postData so the model knows to update, not insert
        $postData['id'] = $id;

        // Validate the received data using the model's dynamic rules
        if (!$this->distributorModel->validate($postData)) {
            // Get errors directly from the validation service, not the model's internal errors property
            $errors = \Config\Services::validation()->getErrors(); // THIS LINE IS CHANGED
            log_message('error', 'Distributor::update - Validation failed. Errors: ' . json_encode($errors));
            // Redirect back to the form with input data and validation errors
            return redirect()->back()->withInput()->with('errors', $errors);
        }

        // Attempt to save the data.
        // The save() method handles both insert and update based on the presence of 'id' in data
        if (!$this->distributorModel->save($postData)) {
            $dbErrors = $this->distributorModel->errors();
            log_message('error', 'Distributor::update - Model save() failed after validation. Database errors: ' . json_encode($dbErrors));
            // Redirect back with database-related errors if save failed
            return redirect()->back()->withInput()->with('errors', $dbErrors);
        }

        log_message('debug', 'Distributor::update - Distributor ID ' . $id . ' updated successfully.');
        return redirect()->to(base_url('distributors'))->with('success', 'Distributor updated successfully!');
    }

    /**
     * Handles the deletion of a distributor.
     *
     * @param int $id The ID of the distributor to delete.
     */
    public function delete(int $id): ResponseInterface
    {
        $distributor = $this->distributorModel->find($id);

        if (!$distributor) {
            return redirect()->to(base_url('distributors'))->with('error', 'Distributor not found for deletion.');
        }

        if ($this->distributorModel->delete($id)) {
            log_message('debug', 'Distributor::delete - Distributor ID ' . $id . ' deleted successfully.');
            return redirect()->to(base_url('distributors'))->with('success', 'Distributor deleted successfully!');
        } else {
            $errors = $this->distributorModel->errors(); // Get any model/DB errors from delete operation
            log_message('error', 'Distributor::delete - Failed to delete distributor ID ' . $id . '. Errors: ' . json_encode($errors));
            return redirect()->to(base_url('distributors'))->with('error', 'Failed to delete distributor.');
        }
    }



    public function exportExcel()
    {
        $distributors = $this->distributorModel->findAll();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        // Set Headers
        $headers = [
            'ID',
            'Custom ID',
            'Agency Name',
            'Owner Name',
            'Owner Phone',
            'Agency Address',
            'Status',
            'Agent Name',
            'Agent Phone',
            'Agency GST Number',
            'Gmail',
            'Notes',
            'Created At',
            'Updated At'
        ];
        $sheet->fromArray($headers, null, 'A1');

        // Add Data
        $row = 2;
        foreach ($distributors as $distributor) {
            $sheet->setCellValue('A' . $row, $distributor['id']);
            $sheet->setCellValue('B' . $row, $distributor['custom_id']);
            $sheet->setCellValue('C' . $row, $distributor['agency_name']);
            $sheet->setCellValue('D' . $row, $distributor['owner_name']);
            $sheet->setCellValue('E' . $row, $distributor['owner_phone']);
            $sheet->setCellValue('F' . $row, $distributor['agency_address']);
            $sheet->setCellValue('G' . $row, $distributor['status']);
            $sheet->setCellValue('H' . $row, $distributor['agent_name']);
            $sheet->setCellValue('I' . $row, $distributor['agent_phone']);
            $sheet->setCellValue('J' . $row, $distributor['agency_gst_number']);
            $sheet->setCellValue('K' . $row, $distributor['gmail']);
            $sheet->setCellValue('L' . $row, $distributor['notes']);
            $sheet->setCellValue('M' . $row, $distributor['created_at']);
            $sheet->setCellValue('N' . $row, $distributor['updated_at']);
            $row++;
        }

        // Auto-size columns for better readability
        foreach (range('A', $sheet->getHighestDataColumn()) as $col) {
            $sheet->getColumnDimension($col)->setAutoSize(true);
        }

        // Set headers for download
        $filename = 'Distributors_Excel_Export_' . date('Ymd') . '.xlsx';
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');

        $writer = new Xlsx($spreadsheet);
        $writer->save('php://output');
        exit(); // Stop script execution after file download
    }


    public function exportPdf()
    {
        $data['distributors'] = $this->distributorModel->findAll();

        // Load the HTML content from the dedicated view file
        $html = view('distributors/pdf_export_template', $data);

        // Instantiate Dompdf with options
        $options = new Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true); // Enable if you use remote assets (e.g., images)
        $dompdf = new Dompdf($options);

        $dompdf->loadHtml($html);

        // (Optional) Set paper size and orientation
        $dompdf->setPaper('A4', 'landscape'); // Use 'landscape' for more columns

        // Render the HTML as PDF
        $dompdf->render();

        // Output the generated PDF to Browser
        $filename = 'Distributors_PDF_Export_' . date('Ymd') . '.pdf';
        $dompdf->stream($filename, ['Attachment' => 1]); // 1 = download, 0 = preview in browser
        exit(); // Stop script execution after file download
    }



    public function exportSingleExcel(int $id)
    {
        $distributor = $this->distributorModel->find($id);

        if (!$distributor) {
            return redirect()->back()->with('error', 'Distributor not found for export.');
        }

        $spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet(); // Ensure full namespace if needed
        $sheet = $spreadsheet->getActiveSheet();
        $sheet->setTitle('Distributor Details');

        // Set Headers for the single distributor's details
        $data = [
            ['Field', 'Value'],
            ['ID', $distributor['id']],
            ['Custom ID', $distributor['custom_id']],
            ['Agency Name', $distributor['agency_name']],
            ['Owner Name', $distributor['owner_name']],
            ['Owner Phone', $distributor['owner_phone']],
            ['Agency Address', $distributor['agency_address']],
            ['Status', $distributor['status']],
            ['Agent Name', $distributor['agent_name']],
            ['Agent Phone', $distributor['agent_phone']],
            ['Agency GST Number', $distributor['agency_gst_number']],
            ['Gmail', $distributor['gmail']],
            ['Notes', $distributor['notes']],
            ['Created At', $distributor['created_at']],
            ['Updated At', $distributor['updated_at']],
        ];

        $sheet->fromArray($data, null, 'A1');

        // Auto-size columns for better readability
        foreach (range('A', $sheet->getHighestDataColumn()) as $col) {
            $sheet->getColumnDimension($col)->setAutoSize(true);
        }

        // Set headers for download
        $filename = 'Distributor_Details_' . $distributor['custom_id'] . '_' . date('Ymd') . '.xlsx';
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');

        $writer = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($spreadsheet); // Ensure full namespace if needed
        $writer->save('php://output');
        exit();
    }

    /**
     * Exports a single distributor's data to a PDF file.
     *
     * @param int $id The ID of the distributor to export.
     */
    public function exportSinglePdf(int $id)
    {
        $distributor = $this->distributorModel->find($id);

        if (!$distributor) {
            return redirect()->back()->with('error', 'Distributor not found for export.');
        }

        // Load the HTML content from a dedicated view file for single PDF
        $data['distributor'] = $distributor; // Pass the single distributor data
        $html = view('distributors/single_distributor_pdf_template', $data);

        $options = new \Dompdf\Options();
        $options->set('isHtml5ParserEnabled', true);
        $options->set('isRemoteEnabled', true);
        $dompdf = new \Dompdf\Dompdf($options);

        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'portrait'); // Portrait for single details is usually better
        $dompdf->render();

        $filename = 'Distributor_Details_' . $distributor['custom_id'] . '_' . date('Ymd') . '.pdf';
        $dompdf->stream($filename, ['Attachment' => 1]);
        exit();
    }
}
